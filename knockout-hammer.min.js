/*
* Knockout Hammer
* knockout (https://github.com/knockout/knockout)
* hammer.js (https://github.com/hammerjs/hammer.js)
* Usage: data-bind="hmHold: holdHandlerFn, hmOptions: { recognizers: [ [Hammer.Press, {time:5000}] ] }"
*/
(function () { ko.utils.arrayForEach(["tap", "doubletap", "press", "pan", "swipe", "pinch", "rotate"], function (n) { var r = "hm" + n.substring(0, 1).toUpperCase() + n.substring(1).toLowerCase(), t, i; ko.bindingHandlers[r] = { init: function (r, u, f, e, o) { var s; if (!u()) return !1; t = Hammer(r, {}); s = u().hmOptions || {}; i = u().bind(o.$data); t.on(n, function (n) { i(o.$data, n) }); return ko.utils.domNodeDisposal.addDisposeCallback(r, function () { return typeof t != "undefined" && t != null && t.destroy(), t = null, !0 }), !0 }, update: function (r, u, f, e, o) { var s; if (!u()) return !1; typeof t != "undefined" && t != null ? t.off(n, i) : t = Hammer(r, {}); s = u().hmOptions || {}; i = u().bind(o); t.on(n, function (n) { i(o.$data, n) }) } } }) }).call(this);